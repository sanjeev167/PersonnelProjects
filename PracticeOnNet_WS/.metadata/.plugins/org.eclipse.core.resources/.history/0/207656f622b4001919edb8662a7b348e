/**
 * 
 */
package com.custom.validation.classLevelValidator;

import java.lang.reflect.InvocationTargetException;

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;

import com.custom.exception.CustomRuntimeException;
import com.custom.exception.ExceptionApplicationUtility;
import com.custom.validation.interfaceForServices.FieldValueWithParentIdExists;
import com.custom.validation.interfaceForServices.TreeMenuValidation;

/**
 * @author Sanjeev
 *
 */
public class ParentNodeRequiredWithTreeNodeTypeValidator implements ConstraintValidator<ParentNodeRequiredWithTreeNodeType, Object> {
	@Autowired
	private ApplicationContext applicationContext;

	private TreeMenuValidation service;
	private String nodeType;
	private String parentNodeCount;
	private String menuManagerParentId;
	private String message;	
	
	

	@Override
	public void initialize(ParentNodeRequiredWithTreeNodeType parentNodeRequiredWithTreeNodeType) {
		Class<? extends TreeMenuValidation> clazz = parentNodeRequiredWithTreeNodeType.service();

		this.nodeType = parentNodeRequiredWithTreeNodeType.nodeType();
		this.parentNodeCount = parentNodeRequiredWithTreeNodeType.parentNodeCount();
		this.menuManagerParentId=parentNodeRequiredWithTreeNodeType.menuManagerParentId();
        this.message=parentNodeRequiredWithTreeNodeType.message();
        
		String serviceQualifier = parentNodeRequiredWithTreeNodeType.serviceQualifier();
		if (!serviceQualifier.equals("")) {
			this.service = this.applicationContext.getBean(serviceQualifier, clazz);
		} else {
			this.service = this.applicationContext.getBean(clazz);
		}
	}

	@Override
	public boolean isValid(Object object, ConstraintValidatorContext context) {
		final Object nodeTypeValue;
		final Object parentNodeCountValue;
		final Object menuManagerParentIdValue;
		
		
		boolean isValid = true;		
		try {
			nodeTypeValue = BeanUtils.getProperty(object, this.nodeType);
			parentNodeCountValue = BeanUtils.getProperty(object, this.parentNodeCount);	
			menuManagerParentIdValue=BeanUtils.getProperty(object, this.menuManagerParentId);		
			
				try {
					//Wrie validation logic here
					if(nodeTypeValue.equals("N")) {
						//If the node type is "Node", check the parent node count for making it sure that whether the 
						//the root node ["Root node will be populated in the parent combo as None."] has been created or not.
						
						if( Integer.parseInt((String)parentNodeCountValue) >1) {
							
						}
						
						
					}else {
						
					}
					isValid = !this.service.parentNodeRequiredWithTreeNodeType(
							nodeTypeValue, nodeType, parentNodeCountValue, 
							parentNodeCount, menuManagerParentIdValue, menuManagerParentId);
							
				} catch (UnsupportedOperationException e) {
					// TODO Auto-generated catch block
					ExceptionApplicationUtility.wrapRunTimeException(e);
				} catch (CustomRuntimeException e) {
					// TODO Auto-generated catch block
					ExceptionApplicationUtility.wrapRunTimeException(e);
				}			
		} catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
			// TODO Auto-generated catch block
			ExceptionApplicationUtility.wrapRunTimeException(e);
		}
		// Set the error reporting path
		if (!isValid) {
			context.disableDefaultConstraintViolation();
			context.buildConstraintViolationWithTemplate(this.message).addPropertyNode(this.menuManagerParentId)
					.addConstraintViolation();
		}

		
		return isValid;
	}
}