/**
 * 
 */
package com.admin.pvt.menu_mgr.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.admin.pvt.masters.dto.NameValue;
import com.admin.pvt.menu_mgr.dto.MenuCollection;
import com.admin.pvt.menu_mgr.dto.MenuDTO;
import com.admin.pvt.menu_mgr.dto.MenuManagerDTO;
import com.admin.pvt.menu_mgr.dto.RoleWiseMenuCollection;
import com.admin.pvt.menu_mgr.entity.MenuManager;
import com.admin.pvt.menu_mgr.entity.TreeMenuTypeMaster;
import com.admin.pvt.menu_mgr.repo.MenuManagerRepository;
import com.admin.pvt.menu_mgr.repo.TreeMenuTypeMasterRepository;
import com.admin.pvt.sec.env.entity.PageMaster;
import com.admin.pvt.sec.env.repo.DepartmentRepository;
import com.admin.pvt.sec.env.repo.PageRepository;
import com.admin.pvt.sec.rbac.entity.AccessRightsRbac;
import com.admin.pvt.sec.rbac.entity.AppRole;
import com.admin.pvt.sec.rbac.repo.AppRoleRepository;
import com.admin.pvt.sec.rbac.service.AppRoleService;
import com.custom.exception.CustomRuntimeException;
import com.custom.exception.ExceptionApplicationUtility;
import com.grid_pagination.DataTableRequest;
import com.grid_pagination.DataTableResults;
import com.grid_pagination.PaginationCriteria;
import com.util.AppConstants;
import com.util.AppUtil;

/**
 * @author Sanjeev
 *
 */
@Service
public class MenuManagerServiceImpl implements MenuManagerService{
	static final Logger log = LoggerFactory.getLogger(MenuManagerServiceImpl.class);
	/** The entity manager. */
	@Autowired
	@PersistenceContext(unitName = AppConstants.JPA_UNIT_PRACTICEONNET)
	private EntityManager entityManager;
	@Autowired
	DepartmentRepository departmentRepository;
	@Autowired
	PageRepository pageRepository;
	@Autowired
	MenuManagerRepository menuManagerRepository;	
	@Autowired
	TreeMenuTypeMasterRepository treeMenuTypeMasterRepository;
	
	@Autowired
	AppRoleRepository appRoleRepository;

	@Override
	public DataTableResults<MenuManagerDTO> loadGrid(HttpServletRequest request, String whereClauseForBaseQuery)
			throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> loadGrid ==> Started");
		DataTableResults<MenuManagerDTO> dataTableResult;
		try {
			DataTableRequest<MenuManager> dataTableInRQ = new DataTableRequest<MenuManager>(request);
			PaginationCriteria pagination = dataTableInRQ.getPaginationRequest();
			String baseQuery;
			
              
			if (whereClauseForBaseQuery.equals(""))	
				baseQuery ="SELECT parent.id as ID, "
						    + "dm.name as departmentMasterName,"
						    + "tmtm.name as treeMenuTypeName, "
						    + "parent.node_type as nodeType, "
				            +" child.node_name  AS menuManagerParentNodeName,"
				            + "parent.node_name AS nodeName,"
				            + "parent.img_url as imgUrl, "
				            + "pm.name as pageBaseUrl, "
				            + "parent.active_c as activeC,"
				            + "(SELECT COUNT(1)-1 FROM menu_manager ) AS totalrecords "+
				
				            " FROM menu_manager parent, menu_manager child ,department_master dm , "
				            + "tree_menu_type_master tmtm ,page_master pm "+
				            " WHERE parent.parent_node_id = child.id "
				            + "and parent.department_id=dm.id "
				            + "and  parent.tree_menu_type_id=tmtm.id "
				            + "and  parent.page_id=pm.id ORDER BY parent.id";
								
				else					
					baseQuery ="SELECT child.id as ID, "
							+ "dm.name as departmentMasterName,"
						    + "tmtm.name as treeMenuTypeName, "
						    + "parent.node_type as nodeType, "
				            +" child.node_name  AS menuManagerParentNodeName,"
				            + "parent.node_name AS nodeName,"
				            + "parent.img_url as imgUrl, "
				            + "pm.name as pageBaseUrl, "
				            + "parent.active_c as activeC,"
				            + "(SELECT COUNT(1)-1 FROM menu_manager parent where "
				            + whereClauseForBaseQuery +" ) AS totalrecords "+
											
							 " FROM menu_manager parent, menu_manager child ,department_master dm , "
							 + "tree_menu_type_master tmtm ,page_master pm "
							 + " WHERE parent.parent_node_id = child.id and "							 
                             +whereClauseForBaseQuery							 
							 + "and  parent.page_id=pm.id "							 
							 + "ORDER BY parent.id";			
			
			//System.out.println("baseQuery ="+baseQuery);
			String paginatedQuery = AppUtil.buildPaginatedQuery(baseQuery, pagination);
			Query query = entityManager.createNativeQuery(paginatedQuery, "MenuManagerDTOMapping");

			@SuppressWarnings("unchecked")
			List<MenuManagerDTO> menuManagerList = query.getResultList();

			dataTableResult = new DataTableResults<MenuManagerDTO>();
			dataTableResult.setDraw(dataTableInRQ.getDraw());
			dataTableResult.setListOfDataObjects(menuManagerList);
			if (!AppUtil.isObjectEmpty(menuManagerList)) {
				dataTableResult.setRecordsTotal(menuManagerList.get(0).getTotalrecords().toString());
				if (dataTableInRQ.getPaginationRequest().isFilterByEmpty()) {
					dataTableResult.setRecordsFiltered(menuManagerList.get(0).getTotalrecords().toString());
				} else {
					dataTableResult.setRecordsFiltered(Integer.toString(menuManagerList.size()));
				}
			}

		} catch (Exception ex) {
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     MenuManagerServiceImpl :==> loadGrid ==> Ended");
		return dataTableResult;
	}

	// This will directly put your result into your mapped dto
	@Transactional
	@Override
	public MenuManagerDTO getReordById(Integer id) throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> getReordById ==> Started");
		MenuManagerDTO menuManagerDTO;
		try {
			MenuManager menuManager = menuManagerRepository.getOne(id);			
			menuManagerDTO = new MenuManagerDTO();
			menuManagerDTO.setId(menuManager.getId());			
			menuManagerDTO.setDepartmentMasterId(menuManager.getDepartmentMaster().getId()+"");			
			menuManagerDTO.setTreeMenuTypeId(menuManager.getTreeMenuTypeMaster().getId()+"");			
			menuManagerDTO.setNodeType(menuManager.getNodeType());
			
			menuManagerDTO.setMenuManagerParentId(menuManager.getParentNodeManager().getId()+"");	
			
			menuManagerDTO.setNodeName(menuManager.getNodeName());			
			menuManagerDTO.setImgUrl(menuManager.getImgUrl());
			if(!menuManager.getPageMaster().getBaseurl().equals("#"))//When the page has no module
			menuManagerDTO.setModuleId(menuManager.getPageMaster().getModuleMaster().getId()+"");
			
			menuManagerDTO.setPageMasterId(menuManager.getPageMaster().getId()+"");						
			
		} catch (Exception ex) {
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     MenuManagerServiceImpl :==> getReordById ==> Ended");
		return menuManagerDTO;
	}
    @Transactional
	@Override
	public MenuManagerDTO saveAndUpdate(MenuManagerDTO menuManagerDTO) throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> saveAndUpdate ==> Started");
		MenuManager menuManager;
		MenuManagerDTO menuManagerDTONew;
		try {			
			if (menuManagerDTO.getId() != null) {//Edit case				
				menuManager = menuManagerRepository.getOne(menuManagerDTO.getId());				
			}
			else {	//Add case				
				menuManager = new MenuManager();				
			}		
						
			menuManager.setDepartmentMaster(departmentRepository.getOne(Integer.parseInt(menuManagerDTO.getDepartmentMasterId())));
			if(menuManagerDTO.getMenuManagerParentId()!=null && !menuManagerDTO.getMenuManagerParentId().equals(""))
			menuManager.setParentNodeManager(menuManagerRepository.getOne(Integer.parseInt(menuManagerDTO.getMenuManagerParentId())));			
			else {
				MenuManager firstMenuManager=new MenuManager();
				firstMenuManager.setNodeName("None");
				firstMenuManager.setNodeType("N");
				menuManager.setParentNodeManager(firstMenuManager);
			}
			menuManager.setNodeName(menuManagerDTO.getNodeName());			
			menuManager.setNodeType(menuManagerDTO.getNodeType());
			menuManager.setTreeMenuTypeMaster(treeMenuTypeMasterRepository.getOne(Integer.parseInt(menuManagerDTO.getTreeMenuTypeId())));			
			
			if(menuManagerDTO.getPageMasterId()!=null && !menuManagerDTO.getPageMasterId().equals(""))
			menuManager.setPageMaster(pageRepository.getOne(Integer.parseInt(menuManagerDTO.getPageMasterId())));	
			else {
				ArrayList<PageMaster> pageMasterList=pageRepository.getDummyNodePageIfExists();
				if(pageMasterList.size()>0) {
					menuManager.setPageMaster(pageMasterList.get(0));
				}					
				else {
					PageMaster pageMaster=new PageMaster();
					pageMaster.setBaseurl("#");pageMaster.setName("#");
					menuManager.setPageMaster(pageMaster);
				}
				
			}
			menuManager.setImgUrl(menuManagerDTO.getImgUrl());
			
			MenuManager returnedMenuManager = menuManagerRepository.saveAndFlush(menuManager);	
            
			menuManagerDTONew = new MenuManagerDTO(returnedMenuManager.getId(),					
					returnedMenuManager.getDepartmentMaster().getName(),
					returnedMenuManager.getTreeMenuTypeMaster().getName(), 
					returnedMenuManager.getNodeType(),
					returnedMenuManager.getParentNodeManager().getNodeName(),
					returnedMenuManager.getNodeName(), 
					returnedMenuManager.getImgUrl(),
					returnedMenuManager.getPageMaster().getBaseurl(), 
					returnedMenuManager.getActiveC()
					);

		} catch (Exception ex) {ex.printStackTrace();
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     MenuManagerServiceImpl :==> saveAndUpdate ==> Ended");
		return menuManagerDTONew;
	}

	@Override
	public boolean deleteOneRecord(Integer id) throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> deleteOneRecord ==> Started");
		boolean isRecordDelete = true;
		try {
			menuManagerRepository.deleteById(id);
		} catch (Exception ex) {
			isRecordDelete = false;
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     MenuManagerServiceImpl :==> deleteOneRecord ==> Ended");
		return isRecordDelete;
	}

	@Transactional
	@Override
	public boolean deleteMultipleRecords(Integer[] recordIdArray) throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> deleteMultipleRecords ==> Started");
		boolean isRecordDelete = true;
		try {
			menuManagerRepository.deleteMenuManagerWithIds(recordIdArray);
		} catch (Exception ex) {
			isRecordDelete = false;
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     MenuManagerServiceImpl :==> deleteMultipleRecords ==> Started");
		return isRecordDelete;
	}

	@Override
	public List<NameValue> getListTreeMenuType() throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> getListTreeMenuType ==> Started");

		List<NameValue> moduleList = new ArrayList<NameValue>();
		NameValue nameValue;

		try {
			List<TreeMenuTypeMaster> treeMenuTypeMasterList = treeMenuTypeMasterRepository.findAll();
			for (TreeMenuTypeMaster treeMenuTypeMaster : treeMenuTypeMasterList) {
				nameValue = new NameValue(treeMenuTypeMaster.getId(), treeMenuTypeMaster.getName());
				moduleList.add(nameValue);
			}
		} catch (Exception ex) {
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}

		log.info("     MenuManagerServiceImpl :==> getListTreeMenuType ==> Ended");

		return moduleList;
	}
	
	@Override
	public List<NameValue> getListTreeParentNode() throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> getListTreeParentNode ==> Started");

		List<NameValue> moduleList = new ArrayList<NameValue>();		
		//moduleList.add(new NameValue(0, "Root"));//For testing
		NameValue nameValue;		
		try {
			List<MenuManager> menuManagerList = menuManagerRepository.findAllTreeNodeList();
			for (MenuManager menuManager : menuManagerList) {
				nameValue = new NameValue(menuManager.getId(), menuManager.getNodeName());				
				moduleList.add(nameValue);
			}
		} catch (Exception ex) {
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}

		log.info("     MenuManagerServiceImpl :==> getListTreeParentNode ==> Ended");

		return moduleList;
	}
	
	//First pick all the roles available in the system
	 //Then pick all the urls of pages from page level access rights for all the roles
	 //Then load all the menu details list available in the system
	 //Then iterate through this menu details list and match the page level access rights within it.
	 //When matched, stuff into menuDTO object
	 //Then collect all menuDTO into menuCollection
	 //Then bind each menu collection within roleWiseMenuCollection
	 //
	 //Caution: A user may have multiple roles in the system. So, roleWiseMenuCollection will be further 
	 //filtered for each user so that it could get all the access rights in userWiseMenuCollection which 
	 //will be prepared after successful login and stuffed into security based user details.
	@Override
	public Map<String, MenuCollection> getRoleWiseMenuCollectionMap() throws CustomRuntimeException {
		log.info("     MenuManagerServiceImpl :==> getRoleWiseMenuCollectionMap ==> Started");
		
		 MenuDTO menuDTO;
		 MenuCollection menuCollection = null;
		 RoleWiseMenuCollection roleWiseMenuCollection;
		 List<AppRole> appRoleList=  appRoleRepository.findAll();
		 List<AccessRightsRbac> accessRightsRbacList;
		 Map<String, MenuDTO> menuMap=new HashMap<String,MenuDTO>();
		 PageMaster pageMaster;
		 String pageBaseUrl;
		 String treeMenuTypeName;
		 MenuManager parentMenuManager;
		 boolean isThisMenuDTOHasallreadyBeenAdde=false;
		 for(AppRole appRole :appRoleList) {
			 accessRightsRbacList=appRole.getAccessRightsRbacs();
			 for(AccessRightsRbac accessRightsRbac:accessRightsRbacList) {
				 pageMaster=accessRightsRbac.getPageMaster();
				 pageBaseUrl=pageMaster.getBaseurl();
				  List<MenuManager> menuManagerList=menuManagerRepository.findAll();
				  menuMap=new HashMap<String,MenuDTO>();
					for(MenuManager menuManager :menuManagerList) {	
						if(pageBaseUrl.equals(menuManager.getPageMaster().getBaseurl())&&menuManager.getNodeType().equals("L")) {
							//Prepare leaf details
							menuDTO=new MenuDTO(
									menuManager.getId()+"",
									menuManager.getNodeName(),
									menuManager.getParentNodeManager().getId()+"",
									menuManager.getPageMaster().getBaseurl(),
									menuManager.getNodeType(),
									menuManager.getImgUrl()
									);
							treeMenuTypeName=menuManager.getTreeMenuTypeMaster().getName();
							menuMap.put(treeMenuTypeName, menuDTO);
							menuCollection.setMenuMap(menuMap);							
							//Start collecting its all parent node and discard those nodes which has allready been collected
							parentMenuManager=menuManager.getParentNodeManager();
							do{
								menuDTO=new MenuDTO(
										menuManager.getId()+"",
										menuManager.getNodeName(),
										menuManager.getParentNodeManager().getId()+"",
										menuManager.getPageMaster().getBaseurl(),
										menuManager.getNodeType(),
										menuManager.getImgUrl()
										);
								treeMenuTypeName=menuManager.getTreeMenuTypeMaster().getName();
								menuMap.put(treeMenuTypeName, menuDTO);
								isThisMenuDTOHasallreadyBeenAdde=checkThisNodeHasAllReadyBeenAddedOrNot(menuCollection,menuDTO);
								if(!isThisMenuDTOHasallreadyBeenAdde)
								ccccmenuCollection.setMenuMap(menuMap);	
							}while(!parentMenuManager.getNodeName().equals("None"));		
						}
						
					}//End of accessRightsRbacList looping
					
			 }//End of accessRightsRbacList looping
		 }//End of appRoleList looping
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 
		 //Logic for userWiseMenuCollection
		 
		 //If a user has one role, then its menuCollection can be taken out directly using its role from 
		 //roleWiseMenuCollection.
		 //For all type of menu collection, we will have iterate through roleWiseMenuCollection
		 //Take one menu-type through a loop
		 //Take user's defined role collection
		 //For each user's role through this role collection, start collecting unique entry for each menu-type in a
		 //separate collection
		 //Finally stuff all these collection a one collection
		 
		 
		 
		  
		
		
		log.info("     MenuManagerServiceImpl :==> getRoleWiseMenuCollectionMap ==> Ended");
		return null;
	}	
	
	
	
	private boolean checkThisNodeHasAllReadyBeenAddedOrNot(MenuCollection menuCollection, MenuDTO newMenuDTO) {
		log.info("     MenuManagerServiceImpl :==> checkThisNodeHasAllReadyBeenAddedOrNot ==> Ended");
		boolean isMenuDTOAllReadyCollected=false;
		for(MenuDTO oldMenuDTO:menuCollection) {
			if(oldMenuDTO.getParent_id().equals(newMenuDTO.getParent_id()))
				isMenuDTOAllReadyCollected= true;			
		}
		return isMenuDTOAllReadyCollected;
		log.info("     MenuManagerServiceImpl :==> checkThisNodeHasAllReadyBeenAddedOrNot ==> Ended");
		
	}//End of checkThisNodeHasAllReadyBeenAddedOrNot

	@Override
	public boolean FieldValueWithParentIdAndChildExists(Object parentValue, String parentId, Object fieldValue,
			String fieldName) throws UnsupportedOperationException, CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean FieldValueWithParentIdAndChildExists(Object parentIdValue, String parentId, Object fieldValue,
			String fieldName, Object idValue, String idFieldName) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean FirstChildValueWithParentIdExists(Object parentIdValue, String parentId, Object fieldValue,
			String fieldName, Object idValue, String idFieldName) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean SecondChildValueWithParentIdExists(Object parentIdValue, String parentId, Object fieldValue,
			String fieldName, Object idValue, String idFieldName) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean ThirdChildValueWithParentIdExists(Object parentIdValue, String parentId, Object fieldValue,
			String fieldName, Object idValue, String idFieldName) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	
	
}
