/**
 * 
 */
package com.config.security.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.admin.pvt.sec.rbac.entity.AccessRightsRbac;
import com.admin.pvt.sec.rbac.entity.AppRole;
import com.admin.pvt.sec.rbac.entity.OperationAccess;
import com.admin.pvt.sec.rbac.repo.AppRoleRepository;
import com.util.PathUtilities;

/**
 * @author Sanjeev
 *
 */
@Service
public class UrlAndRoleMatcherServiceImpl implements UrlAndRoleMatcherService {

	Map<String, ArrayList<String>> urlAndAccessRolesMap;
	ArrayList<String> roleList;

	@Autowired
	AppRoleRepository appRoleRepository;

	public int counter=0;
	@Transactional	
	public Map<String,ArrayList<String>> getUrlAndRoleMatcherList() {

		//counter++;
		//System.out.println("getUrlAndRoleMatcherList called = ["+this.counter+"]");
		Map<String,String>wildCardCharacterUrlWithRoleMap=new HashMap<String, String>();
		try {
		List<AppRole> appRoles = appRoleRepository.findAll();
		List<AccessRightsRbac> accessRightsRbacs = new ArrayList<AccessRightsRbac>();
		List<OperationAccess> operationAccesses = new ArrayList<OperationAccess>();		
		String pageBaseUrl = "";
		String opUrl = "";
		String accessRole = "";
		
		for (AppRole appRole : appRoles) {
			accessRightsRbacs = appRole.getAccessRightsRbacs();
			for (AccessRightsRbac accessRightsRbac : accessRightsRbacs) {
				pageBaseUrl = accessRightsRbac.getPageMaster().getBaseurl();
				operationAccesses = accessRightsRbac.getOperationAccesses();
				if(!pageBaseUrl.contains("*")) {
					for (OperationAccess operationAccess : operationAccesses) {					
						accessRole = operationAccess.getAccessRightsRbac().getAppRole().getRoleName();					
						opUrl = operationAccess.getOperationMaster().getOpurl();					
					   fillUrlAndRolesInMap(pageBaseUrl.trim(),opUrl.trim(),"ROLE_"+accessRole.trim());
					}
				}else{wildCardCharacterUrlWithRoleMap.put(pageBaseUrl, appRole.getRoleName()); }
			}
		}		
	}catch(Exception ex){ex.printStackTrace();}
		
		//urlAndAccessRolesMap=clubWildCardCharacterUrlRolesWithOtherUrlIfMatched(wildCardCharacterUrlWithRoleMap,urlAndAccessRolesMap);
	
	return urlAndAccessRolesMap;

	}

	private void fillUrlAndRolesInMap(String pageBaseUrl, String opUrl, String accessRole) {
		// TODO Auto-generated method stub
		String urlKey = pageBaseUrl + opUrl;
		// This will execute only when the first record comes
		if (urlAndAccessRolesMap == null) {
			urlAndAccessRolesMap = new HashMap<String, ArrayList<String>>();
			roleList = new ArrayList<>();
			roleList.add(accessRole);
			urlAndAccessRolesMap.put(urlKey, roleList);
			//System.out.println("First time urlKey " + urlKey + "   Role =" + roleList);
			
		}
		// This will execute when the url key is already present and new role is coming
		else {
			if (urlAndAccessRolesMap.containsKey(urlKey)) {
				//System.out.println("Duplicate urlKey " + urlKey + "   Role =" + roleList);
				roleList = urlAndAccessRolesMap.get(urlKey);
				roleList.add(accessRole);				
			} else {
				// This will execute when a new url key comes
				//System.out.println("New urlKey " + urlKey + "   Role =" + roleList);
				roleList = new ArrayList<>();
				roleList.add(accessRole);
				urlAndAccessRolesMap.put(urlKey, roleList);				
			}
		}
	}//End of fillUrlAndRolesInMap

	private	Map<String,ArrayList<String>> clubWildCardCharacterUrlRolesWithOtherUrlIfMatched(
										Map<String,String> wildCardCharacterUrlWithRoleMap,
										Map<String,ArrayList<String>>urlAndAccessRolesMap){
		if(wildCardCharacterUrlWithRoleMap!=null) {
			if(urlAndAccessRolesMap!=null) {
				//Take out url from wildCardCharacterUrlWithRoleMap and match it within urlAndAccessRolesMap
				Iterator wildCardCharacterUrlWithRoleMapIteratorOuter = wildCardCharacterUrlWithRoleMap.entrySet().iterator();	
				while (wildCardCharacterUrlWithRoleMapIteratorOuter.hasNext()) {
					Map.Entry mapElementOuter = (Map.Entry) wildCardCharacterUrlWithRoleMapIteratorOuter.next();
					//System.out.println("Url outer => " + mapElementOuter.getKey() + " : Roles outer" + mapElementOuter.getValue().toString());
				    String urlPatternOuter=mapElementOuter.getKey().toString();
				    String outerRole=mapElementOuter.getValue().toString();
				    //Now take url from urlAndAccessRolesMap
				    Iterator urlAndAccessRolesMapIteratorInner = urlAndAccessRolesMap.entrySet().iterator();	
				    while (urlAndAccessRolesMapIteratorInner.hasNext()) {
						Map.Entry mapElementInner = (Map.Entry) urlAndAccessRolesMapIteratorInner.next();
						//System.out.println("Url inner => " + mapElementInner.getKey() + " : Roles Inner " + mapElementInner.getValue().toString());
					    String urlInner=mapElementInner.getKey().toString();
					    //System.out.println("urlInner = "+urlInner+" urlPatternOuter = "+urlPatternOuter);
					    //System.out.println("Inner Outer Match = "+PathUtilities.match(urlInner, urlPatternOuter));
						if(PathUtilities.match(urlInner, urlPatternOuter)) {
							ArrayList<String>innerRoleList=(ArrayList<String>) mapElementInner.getValue();
							//System.out.println("Inner Role before adding  = "+innerRoleList.toString());
							if(!innerRoleList.contains("ROLE_"+outerRole))//avoid duplicate entry
							innerRoleList.add("ROLE_"+outerRole);
					
							//System.out.println("Inner Role After adding  = "+innerRoleList.toString());
						}
				    }//End of urlAndAccessRolesMapIterator loop
				}//End of wildCardCharacterUrlWithRoleMapIterator loop
			}else {
				//This is possible when no access rights have been defined on operation
				 
			}
		}
		
		printUrlWithAllAccessRoles(urlAndAccessRolesMap);
		return urlAndAccessRolesMap;

	}

	private void printUrlWithAllAccessRoles(Map<String, ArrayList<String>> urlAndAccessRolesMap) {
		// TODO Auto-generated method stub
		// Getting an iterator\
		Iterator urlAndAccessRolesIterator;
		if (urlAndAccessRolesMap != null) {
			urlAndAccessRolesIterator = urlAndAccessRolesMap.entrySet().iterator();
			// Iterate through the hashmap

			while (urlAndAccessRolesIterator.hasNext()) {
				Map.Entry mapElement = (Map.Entry) urlAndAccessRolesIterator.next();
				System.out.println("Url => " + mapElement.getKey() + " : Roles " + mapElement.getValue().toString());
			}
		}
	}

}//End of UrlAndRoleMatcherServiceImpl
