/**
 * 
 */
package com.user.controller;

/**
 * @author Sanjeev
 *
 */
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import javax.servlet.http.HttpSession;

@SessionAttributes({ "currentUser" })
@Controller
@RequestMapping(value = "/user")
public class UserLoginController {

	private static final Logger log = LogManager.getLogger(UserLoginController.class);

	@RequestMapping(value = "/pub/login", method = RequestMethod.GET)
	public String login(Model model, String error, String logout) {
        if (error != null)
            model.addAttribute("errorMessge", "Username or Password is incorrect !!");
        if (logout != null)
            model.addAttribute("message", "You have been logged out successfully !!");        
		return "user/pub/login";
	}
	
	

	// After a successful login the control can be transfered anywhere as per
	// business need.
	@RequestMapping(value = "/pvt/postLogin", method = RequestMethod.GET)
	public String postLogin(Model model, HttpSession session) {

		log.info("postLogin()");

		// read principal out of security context and set it to session
		UsernamePasswordAuthenticationToken authentication = (UsernamePasswordAuthenticationToken) SecurityContextHolder
				.getContext().getAuthentication();

		validatePrinciple(authentication.getPrincipal());

		// User loggedInUser = ((PdfUserDetails)
		// authentication.getPrincipal()).getUserDetails();

		// model.addAttribute("currentUser", loggedInUser.getUsername());

		// session.setAttribute("userId", loggedInUser.getId());

		//return "redirect:/wallPage";
		return "user/pvt/dbPage";
	}

	
	@RequestMapping(value = "/pub/register", method = RequestMethod.GET)
	public String register(Model model) {
		log.info("register()");
		
				
		return "user/pub/register";
	}
	
	@RequestMapping(value = "/pub/fgotpwd", method = RequestMethod.GET)
	public String fgotpwd(Model model) {
		log.info("fgotpwd()");
		
				
		return "user/pub/fgotpwd";
	}
	
	
	@RequestMapping(value = "/pub/register", method = RequestMethod.POST)
	public String registerInRecord(Model model) {
		log.info("register()");
		
				
		return "user/pub/register";
	}
	
	@RequestMapping(value = "/pub/fgotpwd", method = RequestMethod.POST)
	public String sendFgotpwd(Model model) {
		log.info("fgotpwd()");
		
				
		return "user/pub/fgotpwd";
	}
	
	@RequestMapping(value = "/pvt/profile", method = RequestMethod.GET)
	public String profile(Model model) {
		log.info("profile()");
		
				
		return "user/pvt/profile";
	}
	
	@RequestMapping(value = "/pvt/db", method = RequestMethod.GET)
	public String db(Model model) {
		log.info("profile()");
		
				
		return "user/pvt/db";
	}
	
	@RequestMapping(value = "/pvt/rbacEnv", method = RequestMethod.GET)
	public String rbacEnv(Model model) {
		log.info("rbacEnv()");
		
				
		return "user/pvt/rbacEnv";
	}
	@RequestMapping(value = "/pvt/rbacBase", method = RequestMethod.GET)
	public String rbacBase(Model model) {
		log.info("rbacBase()");
		
				
		return "user/pvt/rbacBase";
	}
	@RequestMapping(value = "/pvt/rbacRts", method = RequestMethod.GET)
	public String rbacRts(Model model) {
		log.info("rbacRts()");
		
				
		return "user/pvt/rbacRts";
	}
	
	
	
	
	
	private void validatePrinciple(Object principal) {

		// if (!(principal instanceof PdfUserDetails)) {
		// throw new IllegalArgumentException("Principal can not be null!");
		// }
	}

}// End of UserLoginController