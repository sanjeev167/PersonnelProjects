/**
 * 
 */
package com.config.listener;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import javax.servlet.http.HttpSessionAttributeListener;
import javax.servlet.http.HttpSessionBindingEvent;
import javax.servlet.http.HttpSessionEvent;
import javax.servlet.http.HttpSessionListener;

/**
 * @author Sanjeev
 *
 */
@Configuration
public class HttpSessionConfig {
	@Bean // bean for http session listener
	public HttpSessionListener httpSessionListener() {
		return new HttpSessionListener() {

			// This method will be called when session created
			@Override
			public void sessionCreated(HttpSessionEvent se) {
				//Interval is set in seconds
				se.getSession().setMaxInactiveInterval(60);
				System.out.println("Session Created with session id+" + se.getSession().getId());
				System.out.println(" Sanjeev => Session Interval = "+se.getSession().getMaxInactiveInterval());
			}

			// This method will be automatically called when session destroyed
			@Override
			public void sessionDestroyed(HttpSessionEvent se) {
				System.out.println("Session Destroyed, Session id:" + se.getSession().getId());
				
				long systemTime=(new java.util.Date()).getTime();// obtained from StopWatch
				long lastAccessedTime=se.getSession().getLastAccessedTime();
				//long millis = .....;  
				//long minutes = (millis / 1000)  / 60;
				//int seconds = (int)((millis / 1000) % 60);
				int idleTimeInSecond=(int)((systemTime-lastAccessedTime)/1000)%60;
				System.out.println(" Sanjeev => Session Idle time  = " + idleTimeInSecond);
			}
		};
	}

	@Bean // bean for http session attribute listener
	public HttpSessionAttributeListener httpSessionAttributeListener() {
		return new HttpSessionAttributeListener() {

			// This method will be automatically called when session attribute added
			@Override
			public void attributeAdded(HttpSessionBindingEvent se) {
				System.out.println("Attribute Added following information");
				System.out.println("Attribute Name:" + se.getName());
				System.out.println("Attribute Value:" + se.getName());
			}

			// This method will be automatically called when session attribute removed
			@Override
			public void attributeRemoved(HttpSessionBindingEvent se) {
				System.out.println("attributeRemoved");
			}

			// This method will be automatically called when session attribute replace
			@Override
			public void attributeReplaced(HttpSessionBindingEvent se) {
				System.out.println("Attribute Replaced following information");
				System.out.println("Attribute Name:" + se.getName());
				System.out.println("Attribute Old Value:" + se.getValue());
			}
		};
	}
}