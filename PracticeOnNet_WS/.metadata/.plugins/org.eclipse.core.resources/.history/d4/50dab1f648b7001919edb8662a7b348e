/**
 * 
 */
package com.config.security.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.admin.pvt.sec.rbac.entity.AccessRightsRbac;
import com.admin.pvt.sec.rbac.entity.AppRole;
import com.admin.pvt.sec.rbac.entity.OperationAccess;
import com.admin.pvt.sec.rbac.repo.AppRoleRepository;

/**
 * @author Sanjeev
 *
 */
@Service
public class UrlAndRoleMatcherServiceImpl implements UrlAndRoleMatcherService{
	
	Map<String,ArrayList<String>> urlAndAccessRolesMap;
	ArrayList<String> roleList;
	
	
	@Autowired
	AppRoleRepository appRoleRepository;
	
	@Transactional	
	public Map<String,ArrayList<String>> getUrlAndRoleMatcherList() {
		
		Map<String,String>wildCardCharacterUrlWithRoleMap=new HashMap<String, String>();
		try {
		List<AppRole> appRoles = appRoleRepository.findAll();
		List<AccessRightsRbac> accessRightsRbacs = new ArrayList<AccessRightsRbac>();
		List<OperationAccess> operationAccesses = new ArrayList<OperationAccess>();		
		String pageBaseUrl = "";
		String opUrl = "";
		String accessRole = "";
		
		for (AppRole appRole : appRoles) {
			accessRightsRbacs = appRole.getAccessRightsRbacs();
			for (AccessRightsRbac accessRightsRbac : accessRightsRbacs) {
				pageBaseUrl = accessRightsRbac.getPageMaster().getBaseurl();
				operationAccesses = accessRightsRbac.getOperationAccesses();
				if(!pageBaseUrl.contains("*")) {
				for (OperationAccess operationAccess : operationAccesses) {					
					accessRole = operationAccess.getAccessRightsRbac().getAppRole().getRoleName();					
					opUrl = operationAccess.getOperationMaster().getOpurl();
				//System.out.println("Url "+pageBaseUrl.trim()+opUrl.trim() + " Role "+"ROLE_"+accessRole.trim());
					//If wild character containing url comes, it should be checked against all already collected 
					//uls. if found, its corresponding roles should be clubed with the roles of the matched url
					//Don't collect wild card character url and roles together
					//Collect all wild character url in a list while this looping
					//Once the loop is finished, start traversing within the the collected url and role mapping
					//Whereever matched, club this role with the roles of matched url.
					
				fillUrlAndRolesInMap(pageBaseUrl.trim(),opUrl.trim(),"ROLE_"+accessRole.trim());
				}
				}else {
					wildCardCharacterUrlWithRoleMap.put(pageBaseUrl, appRole.getRoleName());
				   }
				}
			}
		}
		}catch(Exception ex) {ex.printStackTrace();}
		
		//printUrlWithAllAccessRoles(urlAndAccessRolesMap);
		return urlAndAccessRolesMap;

	}

	private void fillUrlAndRolesInMap(String pageBaseUrl, String opUrl, String accessRole) {
		// TODO Auto-generated method stub
		String urlKey = pageBaseUrl + opUrl;
		// This will execute only when the first record comes
		if (urlAndAccessRolesMap == null) {
			urlAndAccessRolesMap = new HashMap<String, ArrayList<String>>();
			roleList = new ArrayList<>();
			roleList.add(accessRole);
			urlAndAccessRolesMap.put(urlKey, roleList);
			//System.out.println("First time urlKey " + urlKey + "   Role =" + roleList);
			
		}
		// This will execute when the url key is already present and new role is coming
		else {
			if (urlAndAccessRolesMap.containsKey(urlKey)) {
				//System.out.println("Duplicate urlKey " + urlKey + "   Role =" + roleList);
				roleList = urlAndAccessRolesMap.get(urlKey);
				roleList.add(accessRole);
				
			} else {
				// This will execute when a new url key comes
				//System.out.println("New urlKey " + urlKey + "   Role =" + roleList);
				roleList = new ArrayList<>();
				roleList.add(accessRole);
				urlAndAccessRolesMap.put(urlKey, roleList);
				
			}
		
		

	}
	
	private	Map<String,ArrayList<String>> urlAndAccessRolesMap=clubWildCardCharacterUrlRolesWithOtherUrlIfMatched(
				Map<String,String> wildCardCharacterUrlWithRoleMap,Map<String,
				ArrayList<String>>urlAndAccessRolesMap){
			
			
		}
		
		private void printUrlWithAllAccessRoles(Map<String, ArrayList<String>> urlAndAccessRolesMap) {
		// TODO Auto-generated method stub
		// Getting an iterator
		Iterator urlAndAccessRolesIterator = urlAndAccessRolesMap.entrySet().iterator();
		// Iterate through the hashmap

		while (urlAndAccessRolesIterator.hasNext()) {
			Map.Entry mapElement = (Map.Entry) urlAndAccessRolesIterator.next();
			System.out.println("Url => "+mapElement.getKey() + " : Roles " + mapElement.getValue().toString());
		}
	}


}//End of UrlAndRoleMatcherServiceImpl
