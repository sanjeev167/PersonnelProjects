/**
 * 
 */
package com.config.security.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.admin.pvt.sec.rbac.entity.AccessRightsRbac;
import com.admin.pvt.sec.rbac.entity.AppRole;
import com.admin.pvt.sec.rbac.entity.OperationAccess;
import com.admin.pvt.sec.rbac.repo.AppRoleRepository;

/**
 * @author Sanjeev
 *
 */
@Service
public class UrlAndRoleMatcherServiceImpl implements UrlAndRoleMatcherService{
	
	Map<String,ArrayList<String>> urlAndAccessRolesMap;
	ArrayList<String> roleList;
	
	
	@Autowired
	AppRoleRepository appRoleRepository;
	
	@Transactional	
	public List<Matcher> getUrlAndRoleMatcherList() {
		List<Matcher> urlAndRoleMatchers = new ArrayList<Matcher>();		
		try {
		List<AppRole> appRoles = appRoleRepository.findAll();
		List<AccessRightsRbac> accessRightsRbacs = new ArrayList<AccessRightsRbac>();
		List<OperationAccess> operationAccesses = new ArrayList<OperationAccess>();		
		String pageBaseUrl = "";
		String opUrl = "";
		String accessRole = "";
		
		for (AppRole appRole : appRoles) {
			accessRightsRbacs = appRole.getAccessRightsRbacs();
			for (AccessRightsRbac accessRightsRbac : accessRightsRbacs) {
				pageBaseUrl = accessRightsRbac.getPageMaster().getBaseurl();
				operationAccesses = accessRightsRbac.getOperationAccesses();
				for (OperationAccess operationAccess : operationAccesses) {					
					accessRole = operationAccess.getAccessRightsRbac().getAppRole().getRoleName();					
					opUrl = operationAccess.getOperationMaster().getOpurl();
					fillUrlAndRolesInMap(pageBaseUrl.trim(),opUrl.trim(),accessRole.trim());
				}
			}
		}
		
		}catch(Exception ex) {ex.printStackTrace();}
		
		printUrlWithAllAccessRoles(urlAndAccessRolesMap);
		return urlAndRoleMatchers;

	}

	private void printUrlWithAllAccessRoles(Map<String, ArrayList<String>> urlAndAccessRolesMap2) {
		// TODO Auto-generated method stub
		
	}

	private void fillUrlAndRolesInMap(String pageBaseUrl, String opUrl, String accessRole) {
		// TODO Auto-generated method stub
		String urlKey=pageBaseUrl+opUrl;
		//This will execute only when the first record comes
		if(urlAndAccessRolesMap==null) {
			urlAndAccessRolesMap = new HashMap<String,ArrayList<String>>();
			roleList=new ArrayList<>();
			roleList.add(accessRole);
			urlAndAccessRolesMap.put(urlKey, roleList);
		}
		
		//This will execute when the urlkey ia laready present and new role is coming
		if(urlAndAccessRolesMap.containsKey(urlKey)) {
			urlAndAccessRolesMap.get(urlKey).add(accessRole);
		}else {
			//This will execute when a new urlkey comes 
			roleList=new ArrayList<>();
			roleList.add(accessRole);
			urlAndAccessRolesMap.put(urlKey, roleList);
		}
		
	}

}//End of UrlAndRoleMatcherServiceImpl
